track_distance_to(trips0$x, trips0$y, 0, 0)
devtools::load_all(".")
track_distance_to(trips0$x, trips0$y, 0, 0)
devtools::load_all(".")
track_distance_to(trips0$x, trips0$y, to_x = 147, to_y = -42)[1:10]
library(triplib)
## now we group by id (also need arrange by date to be sure ...)
metric <- trips0 %>% group_by(id) %>% mutate(distance = track_distance(x, y),
angle = track_angle(x, y),
turn = track_turn(x, y),
bearing = track_bearing(x, y),
duration = track_time(date),
speed = track_speed(x, y, date),
distance_to = track_distance_to(x, y, 147, -42))
metric
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_point(data = data.frame(x = 147, y = -42), pch = "+", cex = 2)
## now we group by id (also need arrange by date to be sure ...)
metric <- trips0 %>% group_by(id) %>% mutate(distance = track_distance(x, y),
angle = track_angle(x, y),
turn = track_turn(x, y),
bearing = track_bearing(x, y),
duration = track_time(date),
speed = track_speed(x, y, date),
distance_to = track_distance_to(x, y, 147, -42))
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_point(data = data.frame(x = 147, y = -42), pch = "+", cex = 2)
metric
metric %>%
ggplot(aes(x, y, colour = distance_to))
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_point(data = data.frame(x = 147, y = -42), pch = "+", cex = 2, colour = NULL)
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_point(data = data.frame(x = 147, y = -42), pch = "+", cex = 2, colour = NA)
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_point(data = data.frame(x = 147, y = -42, distance_to = 0))
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, distance_to = 0),
label = "home")
track_bearing_to(trips0$x, trips0$y, to_x = 147, to_y = -42)[1:10]
library(triplib)
plot(trips0[1:10, 1:2])
plot(trips0[1:10, 1:2], xlim = c(110, 150), ylim = c(-43, -39))
points(147, -42)
?bearing
bearing(cbind(0, 0), cbind(c(0, 100, 100, 100), c(90, 45, -45, -60)))
geosphere::bearing(cbind(0, 0), cbind(c(0, 100, 100, 100), c(90, 45, -45, -60)))
track_bearing_to(0,0, c(0, 10, 0, -10), c(5, 0, -5, 0))
## now we group by id (also need arrange by date to be sure ...)
metric <- trips0 %>% group_by(id) %>% mutate(distance = track_distance(x, y),
angle = track_angle(x, y),
turn = track_turn(x, y),
bearing = track_bearing(x, y),
duration = track_time(date),
speed = track_speed(x, y, date),
distance_to = track_distance_to(x, y, 147, -42),
bearing_to = track_bearing(to, xy, 147, -42))
metric
metric %>%
ggplot(aes(x, y, cex= 1/angle)) +
geom_point() +
geom_path(col = rgb(0.2, 0.2, 0.2, 0.2))
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, distance_to = 0),
label = "home")
metric %>%
ggplot(aes(x, y, colour = bearing_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, distance_to = 0),
label = "home")
devtools::load_all(".")
## now we group by id (also need arrange by date to be sure ...)
metric <- trips0 %>% group_by(id) %>% mutate(distance = track_distance(x, y),
angle = track_angle(x, y),
turn = track_turn(x, y),
bearing = track_bearing(x, y),
duration = track_time(date),
speed = track_speed(x, y, date),
distance_to = track_distance_to(x, y, 147, -42),
bearing_to = track_bearing(to, xy, 147, -42))
metric
metric %>%
ggplot(aes(x, y, cex= 1/angle)) +
geom_point() +
geom_path(col = rgb(0.2, 0.2, 0.2, 0.2))
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, distance_to = 0),
label = "home")
metric %>%
ggplot(aes(x, y, colour = bearing_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, distance_to = 0),
label = "home")
library(triplib)
devtools::load_all(".")
## now we group by id (also need arrange by date to be sure ...)
metric <- trips0 %>% group_by(id) %>% mutate(distance = track_distance(x, y),
angle = track_angle(x, y),
turn = track_turn(x, y),
bearing = track_bearing(x, y),
duration = track_time(date),
speed = track_speed(x, y, date),
distance_to = track_distance_to(x, y, 147, -42),
bearing_to = track_bearing_to(x, y, 147, -42))
metric
metric %>%
ggplot(aes(x, y, cex= 1/angle)) +
geom_point() +
geom_path(col = rgb(0.2, 0.2, 0.2, 0.2))
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, distance_to = 0),
label = "home")
metric %>%
ggplot(aes(x, y, colour = bearing_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, distance_to = 0),
label = "home")
metric %>%
ggplot(aes(x, y, colour = bearing_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, bearing_to = 0),
label = "home")
range(metric$bearing_to)
## now we group by id (also need arrange by date to be sure ...)
metric <- trips0 %>% group_by(id) %>% mutate(distance = track_distance(x, y),
angle = track_angle(x, y),
turn = track_turn(x, y),
bearing = track_bearing(x, y),
duration = track_time(date),
speed = track_speed(x, y, date),
distance_to = track_distance_to(x, y, 147, -42),
bearing_to = track_bearing_to(x, y, -147, -42))
metric
metric %>%
ggplot(aes(x, y, cex= 1/angle)) +
geom_point() +
geom_path(col = rgb(0.2, 0.2, 0.2, 0.2))
metric %>%
ggplot(aes(x, y, colour = distance_to)) +
geom_point() + geom_label(data = data.frame(x = 147, y = -42, distance_to = 0),
label = "home")
metric %>%
ggplot(aes(x, y, colour = bearing_to)) +
geom_point() + geom_label(data = data.frame(x = -147, y = -42, bearing_to = 0),
label = "home")
range(metric$bearing_to)
## now we group by id (also need arrange by date to be sure ...)
metric <- trips0 %>% group_by(id) %>% mutate(distance = track_distance(x, y),
angle = track_angle(x, y),
turn = track_turn(x, y),
bearing = track_bearing(x, y),
duration = track_time(date),
speed = track_speed(x, y, date),
distance_to = track_distance_to(x, y, 147, -42),
bearing_to = track_bearing_to(x, y, 100, -42))
metric %>%
ggplot(aes(x, y, colour = bearing_to)) +
geom_point() + geom_label(data = data.frame(x = 100, y = -42, bearing_to = 0),
label = "home")
pkgdown::build_site()
pkgdown::build_site()
library(traipse)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(traipse)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(traipse)
pkgdown::build_site()
library(traipse)
pkgdown::build_site()
dev.size("px")
?adehabitatLT::rasterize.ltraj
library(adehabitatLT)
data(puechabonsp)
data(puechcirc)
## Show the trajectories on the map
plot(puechcirc, spixdf = puechabonsp$map)
## rasterize the trajectories
ii <- rasterize.ltraj(puechcirc, puechabonsp$map)
## show, e.g. the first rasterized trajectory
tr1 <- ii[[1]]
head(tr1)
plot(tr1)
tri
tr1
class(tr1)
points(tr1[tr1[[1]]==3,], col="red")
rasterize.ltraj
puechabonsp
puechcirc
summary(puechcirc)
?ltraj
data(puechabonsp)
locs <- puechabonsp$relocs
head(locs)
xy <- coordinates(locs)
df <- as.data.frame(locs)
id <- df[,1]
######################################################
##
## Example of a trajectory of type I (time not recorded)
(litrI <- as.ltraj(xy, id = id, typeII=FALSE))
plot(litrI)
litrI
summary(litrI)
head(litr[[1]])
data(puechabonsp)
locs <- puechabonsp$relocs
head(locs)
xy <- coordinates(locs)
df <- as.data.frame(locs)
id <- df[,1]
######################################################
##
## Example of a trajectory of type I (time not recorded)
(litrI <- as.ltraj(xy, id = id, typeII=FALSE))
plot(litrI)
## The components of the object of class "ltraj"
head(litrI[[1]])
######################################################
##
## Example of a trajectory of type II (time recorded)
### Conversion of the date to the format POSIX
da <- as.character(df$Date)
da <- as.POSIXct(strptime(as.character(df$Date),"%y%m%d", tz="Europe/Paris"))
### Creation of an object of class "ltraj", with for
### example the first animal
(tr1 <- as.ltraj(xy[id=="Brock",],
date = da[id=="Brock"],
id="Brock"))
## The components of the object of class "ltraj"
head(tr1[[1]])
## With all animals
(litr <- as.ltraj(xy, da, id = id))
## Change something manually in the first burst:
head(litr[[1]])
litr[[1]][3,"x"] <- 700000
## Recompute the trajectory
litr <- rec(litr)
## Note that descriptive statistics have changed (e.g. dx)
head(litr[[1]])
litr
library(amt)
?make_track
deer
?deer
library(help = raster)
?raster::buffer
r <- raster(ncol=36,nrow=18)
r[] <- NA
r[500] <- 1
b <- buffer(r, width=5000000)
#plot(b)
library(raster)
library(raster)
r <- raster(ncol=36,nrow=18)
r[] <- NA
r[500] <- 1
b <- buffer(r, width=5000000)
#plot(b)
b
plot(r)
plot(b)
library(tibble)
## what cells are not NA?
cells <- as_tibble(as.data.frame(r))
cells
?as.data.frame
## what cells are not NA?
cells <- as_tibble(as.data.frame(r, na.rm = TRUE))
cells
?tabularaster::as_tibble
## what cells are not NA?
cells <- tabularaster::as_tibble(r, cell = TRUE, value = FALSE)
cells
## what cells are not NA?
cells <- tibble::tibble(cell = !is.na(raster::values(r)))
cells
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
cells
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dist <- geodist::geodist(xy, xyFromCell(r, cells$cell))
str(dist)
## example from the docs, made more explicit
r <- raster(extent(-180, 180, -90, 90), ncol = 36, nrow = 18, crs = "+init=epsg:4326")
r[] <- NA
r[500] <- 1
##b <- buffer(r, width=5000000)
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dist <- geodist::geodist(xy, xyFromCell(r, cells$cell))
width <- 5000000
b <- raster(r)
plot(b)
b[which(dist < width)] <- 1
plot(b)
dist <- geodist::geodist(xy, xyFromCell(r, cells$cell), measure = "geodesic")
width <- 5000000
b <- raster(r)
b[which(dist < width)] <- 1
plot(b)
r[c(100, 500)] <- 1
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dist <- geodist::geodist(xy, xyFromCell(r, cells$cell), measure = "geodesic")
width <- 5000000
b <- raster(r)
b[which(dist < width)] <- 1
plot(b)
str(dist)
class(dist)
aa <- do.call(pmin, lapply(as.data.frame(dist)))
aa <- do.call(pmin, as.list(as.data.frame(dist)))
str(aa)
bb <- pgmin(dist[,1], dist[,2])
bb <- pmin(dist[,1], dist[,2])
range(aa - bb)
dist <- do.call(pmin,
as.list(as.data.frame(geodist::geodist(xy, xyFromCell(r, cells$cell),
measure = "geodesic"))))
width <- 5000000
b <- raster(r)
b[which(dist < width)] <- 1
plot(b)
## example from the docs, made more explicit
r <- raster(extent(-180, 180, -90, 90), ncol = 36, nrow = 18, crs = "+init=epsg:4326")
r[] <- NA
r[c(100, 500)] <- 1
##b <- buffer(r, width=5000000)
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dd <- geodist::geodist(xy, xyFromCell(r, cells$cell),
measure = "geodesic")
if (nrow(cells) > 1) {
dd <- do.call(pmin,
as.list(as.data.frame()))
}
width <- 5000000
b <- raster(r)
b[which(dd < width)] <- 1
plot(b)
## example from the docs, made more explicit
r <- raster(extent(-180, 180, -90, 90), ncol = 36, nrow = 18, crs = "+init=epsg:4326")
r[] <- NA
r[c(100, 500)] <- 1
##b <- buffer(r, width=5000000)
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dd <- geodist::geodist(xy, xyFromCell(r, cells$cell),
measure = "geodesic")
if (nrow(cells) > 1) {
dd <- do.call(pmin,
as.list(as.data.frame(dd)))
}
width <- 5000000
b <- raster(r)
b[which(dd < width)] <- 1
plot(b)
## example from the docs, made more explicit
r <- raster(extent(-180, 180, -90, 90), ncol = 36, nrow = 18, crs = "+init=epsg:4326")
r[] <- NA
r[c(100, 500)] <- 1
##b <- buffer(r, width=5000000)
pbuffer <- function(r) {
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dd <- geodist::geodist(xy, xyFromCell(r, cells$cell),
measure = "geodesic")
if (nrow(cells) > 1) {
dd <- do.call(pmin,
as.list(as.data.frame(dd)))
}
width <- 5000000
b <- raster(r)
b[which(dd < width)] <- 1
b
}
rbenchmark::benchmark(raster = raster::buffer(r),
pbuffer = pbuffer(r),
replications = 1)
rbenchmark::benchmark(raster = raster::buffer(r),
pbuffer = pbuffer(r),
replications = 1)
width <- 5000000
rbenchmark::benchmark(raster = raster::buffer(r, width),
pbuffer = pbuffer(r, width ),
replications = 1)
## example from the docs, made more explicit
r <- raster(extent(-180, 180, -90, 90), ncol = 36, nrow = 18, crs = "+init=epsg:4326")
r[] <- NA
r[c(100, 500)] <- 1
##b <- buffer(r, width=5000000)
pbuffer <- function(r, width = 0) {
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dd <- geodist::geodist(xy, xyFromCell(r, cells$cell),
measure = "geodesic")
if (nrow(cells) > 1) {
dd <- do.call(pmin,
as.list(as.data.frame(dd)))
}
b <- raster(r)
b[which(dd < width)] <- 1
b
}
width <- 5000000
rbenchmark::benchmark(raster = raster::buffer(r, width),
pbuffer = pbuffer(r, width ),
replications = 1)
rbenchmark::benchmark(raster = raster::buffer(r, width),
pbuffer = pbuffer(r, width ),
replications = 10)
## example from the docs, made more explicit
r <- raster(extent(-180, 180, -90, 90), ncol = 360, nrow = 180, crs = "+init=epsg:4326")
r[] <- NA
r[c(100, 500) * 10] <- 1
##b <- buffer(r, width=5000000)
pbuffer <- function(r, width = 0) {
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dd <- geodist::geodist(xy, xyFromCell(r, cells$cell),
measure = "geodesic")
if (nrow(cells) > 1) {
dd <- do.call(pmin,
as.list(as.data.frame(dd)))
}
b <- raster(r)
b[which(dd < width)] <- 1
b
}
width <- 5000000
rbenchmark::benchmark(raster = raster::buffer(r, width),
pbuffer = pbuffer(r, width ),
replications = 10)
library(matrixStats)
## example from the docs, made more explicit
r <- raster(extent(-180, 180, -90, 90), ncol = 360, nrow = 180, crs = "+init=epsg:4326")
r[] <- NA
r[c(100, 500) * 10] <- 1
##b <- buffer(r, width=5000000)
pbuffer <- function(r, width = 0) {
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dd <- geodist::geodist(xy, xyFromCell(r, cells$cell),
measure = "geodesic")
if (nrow(cells) > 1) {
#dd <- do.call(pmin,
#              as.list(as.data.frame(dd)))
dd <- rowMins(dd)
}
b <- raster(r)
b[which(dd < width)] <- 1
b
}
width <- 5000000
rbenchmark::benchmark(raster = raster::buffer(r, width),
pbuffer = pbuffer(r, width ),
replications = 10)
?max.col
m <- matrix(rnorm(20), ncol = 2)
pmin(m[,1], m[2,])
pmin(m[,1], m[,2])
m[cbind(seq_len(nrow(m)), max.col(-m))]
pmax(m[,1], m[,2])
pbuffer <- function(r, width = 0) {
## what cells are not NA?
cells <- tibble::tibble(cell = which(!is.na(raster::values(r))))
## all coordinates in a matrix (beware of big rasters ...)
xy <- coordinates(r)
dd <- geodist::geodist(xy, xyFromCell(r, cells$cell),
measure = "geodesic")
if (nrow(cells) > 1) {
#dd <- do.call(pmin,
#              as.list(as.data.frame(dd)))
# dd <- rowMins(dd)
dd[cbind(seq_len(nrow(dd)), max.col(-dd))]
}
b <- raster(r)
b[which(dd < width)] <- 1
b
}
width <- 5000000
rbenchmark::benchmark(raster = raster::buffer(r, width),
pbuffer = pbuffer(r, width ),
replications = 10)
library(traipse)
