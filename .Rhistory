n <- 500
## Make separation between obs gamma distributed
x <- rgamma(n, 3)
x <- cumsum(x)
x <- x/x[n]
## Track is lissajous + brownian bridge
b.scale <- 0.6
r.scale <- sample(c(0.1, 2, 10.2), n, replace=TRUE,
prob=c(0.8, 0.18, 0.02))
set.seed(26 + .x -1)
lon <- (lon + -5 * .x) + 20 * sin(2 * pi * x) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
lat <- (lat + -3 * .x) 10 *(sin(3 * 2 * pi * x) + cos(2 * pi * x) - 1) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
tms <- ISOdate(2001, 1, 1) + trunc(days * 24 * 60 * 60 *x) + time * 3600 * 24 * 7 *  sign(rnorm(1)) * .x
tibble(
x =  lon,
y =  lat,
date = tms)
}, .id = "id")
if (plot) {
plot(d$x, d$y, asp = 1/cos(mean(d$y) * pi/180))
lines(d$x, d$y)
maps::map(add = TRUE)
}
d
}
trips0 <- make_fake(3)
usethis::use_data(trips0)
make_fake <- function(ngroup = 1, lon = 120, lat = -40, time = 0, plot = TRUE) {
## Brownian motion tethered at each end
brownian.bridge <- function(n, r) {
x <- cumsum(rnorm(n, 0, 1))
x <- x - (x[1] + seq(0, 1, length=n) * (x[n] - x[1]))
r * x
}
d <- purrr::map_dfr(seq_len(ngroup), ~{
## Number of days and number of obs
days <- 80
n <- 500
## Make separation between obs gamma distributed
x <- rgamma(n, 3)
x <- cumsum(x)
x <- x/x[n]
## Track is lissajous + brownian bridge
b.scale <- 0.6
r.scale <- sample(c(0.1, 2, 10.2), n, replace=TRUE,
prob=c(0.8, 0.18, 0.02))
set.seed(26 + .x -1)
lon <- (lon + -5 * .x) + 20 * sin(2 * pi * x) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
lat <- (lat + -3 * .x) 10 *(sin(3 * 2 * pi * x) + cos(2 * pi * x) - 1) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
tms <- ISOdate(2001, 1, 1) + trunc(days * 24 * 60 * 60 *x) + time * 3600 * 24 * 7 *  sign(rnorm(1)) * .x
tibble(
x =  lon,
y =  lat,
date = tms)
}, .id = "id")
if (plot) {
plot(d$x, d$y, asp = 1/cos(mean(d$y) * pi/180))
lines(d$x, d$y)
maps::map(add = TRUE)
}
d
}
make_fake <- function(ngroup = 1, lon = 120, lat = -40, time = 0, plot = TRUE) {
## Brownian motion tethered at each end
brownian.bridge <- function(n, r) {
x <- cumsum(rnorm(n, 0, 1))
x <- x - (x[1] + seq(0, 1, length=n) * (x[n] - x[1]))
r * x
}
d <- purrr::map_dfr(seq_len(ngroup), ~{
## Number of days and number of obs
days <- 80
n <- 500
## Make separation between obs gamma distributed
x <- rgamma(n, 3)
x <- cumsum(x)
x <- x/x[n]
## Track is lissajous + brownian bridge
b.scale <- 0.6
r.scale <- sample(c(0.1, 2, 10.2), n, replace=TRUE,
prob=c(0.8, 0.18, 0.02))
set.seed(26 + .x -1)
lon <- (lon + -5 * .x) + 20 * sin(2 * pi * x) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
lat <- (lat + -3 * .x) + 10 *(sin(3 * 2 * pi * x) + cos(2 * pi * x) - 1) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
tms <- ISOdate(2001, 1, 1) + trunc(days * 24 * 60 * 60 *x) + time * 3600 * 24 * 7 *  sign(rnorm(1)) * .x
tibble(
x =  lon,
y =  lat,
date = tms)
}, .id = "id")
if (plot) {
plot(d$x, d$y, asp = 1/cos(mean(d$y) * pi/180))
lines(d$x, d$y)
maps::map(add = TRUE)
}
d
}
trips0 <- make_fake(3)
make_fake <- function(ngroup = 1, lon = 120, lat = -40, time = 0, plot = TRUE) {
## Brownian motion tethered at each end
brownian.bridge <- function(n, r) {
x <- cumsum(rnorm(n, 0, 1))
x <- x - (x[1] + seq(0, 1, length=n) * (x[n] - x[1]))
r * x
}
d <- purrr::map_dfr(seq_len(ngroup), ~{
## Number of days and number of obs
days <- 80
n <- 500
## Make separation between obs gamma distributed
x <- rgamma(n, 3)
x <- cumsum(x)
x <- x/x[n]
## Track is lissajous + brownian bridge
b.scale <- 0.6
r.scale <- sample(c(0.1, 2, 10.2), n, replace=TRUE,
prob=c(0.8, 0.18, 0.02))
set.seed(26 + .x -1)
lon <- (lon + -5 * .x) + 20 * sin(2 * pi * x) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
lat <- (lat + -3 * .x) + 10 *(sin(3 * 2 * pi * x) + cos(2 * pi * x) - 1) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
tms <- ISOdate(2001, 1, 1) + trunc(days * 24 * 60 * 60 *x) + time * 3600 * 24 * 7 *  sign(rnorm(1)) * .x
tibble::tibble(
x =  lon,
y =  lat,
date = tms)
}, .id = "id")
if (plot) {
plot(d$x, d$y, asp = 1/cos(mean(d$y) * pi/180))
lines(d$x, d$y)
maps::map(add = TRUE)
}
d
}
trips0 <- make_fake(3)
usethis::use_data(trips0)
usethis::use_package_doc()
trips0
usethis::use_pipe()
usethis::use_readme_rmd()
usethis::use_pipe()
usethis::use_roxygen_md()
usethis::use_pipe()
usethis::use_code_of_conduct()
trips0 <- make_fake(3) %>% dplyr::select(x, y, date, id)
usethis::use_data(trips0)
make_fake <- function(ngroup = 1, lon = 120, lat = -40, time = 0, plot = TRUE) {
## Brownian motion tethered at each end
brownian.bridge <- function(n, r) {
x <- cumsum(rnorm(n, 0, 1))
x <- x - (x[1] + seq(0, 1, length=n) * (x[n] - x[1]))
r * x
}
d <- purrr::map_dfr(seq_len(ngroup), ~{
## Number of days and number of obs
days <- 80
n <- 500
## Make separation between obs gamma distributed
x <- rgamma(n, 3)
x <- cumsum(x)
x <- x/x[n]
## Track is lissajous + brownian bridge
b.scale <- 0.6
r.scale <- sample(c(0.1, 2, 10.2), n, replace=TRUE,
prob=c(0.8, 0.18, 0.02))
set.seed(26 + .x -1)
lon <- (lon + -5 * .x) + 20 * sin(2 * pi * x) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
lat <- (lat + -3 * .x) + 10 *(sin(3 * 2 * pi * x) + cos(2 * pi * x) - 1) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
tms <- ISOdate(2001, 1, 1) + trunc(days * 24 * 60 * 60 *x) + time * 3600 * 24 * 7 *  sign(rnorm(1)) * .x
tibble::tibble(
x =  lon,
y =  lat,
date = tms)
}, .id = "id")
if (plot) {
plot(d$x, d$y, asp = 1/cos(mean(d$y) * pi/180))
lines(d$x, d$y)
maps::map(add = TRUE)
}
d
}
library(magrittr)
trips0 <- make_fake(3) %>% dplyr::select(x, y, date, id)
usethis::use_data(trips0)
make_fake <- function(ngroup = 1, lon = 120, lat = -40, time = 0, plot = TRUE) {
## Brownian motion tethered at each end
brownian.bridge <- function(n, r) {
x <- cumsum(rnorm(n, 0, 1))
x <- x - (x[1] + seq(0, 1, length=n) * (x[n] - x[1]))
r * x
}
d <- purrr::map_dfr(seq_len(ngroup), ~{
## Number of days and number of obs
days <- 80
n <- 500
## Make separation between obs gamma distributed
x <- rgamma(n, 3)
x <- cumsum(x)
x <- x/x[n]
## Track is lissajous + brownian bridge
b.scale <- 0.6
r.scale <- sample(c(0.1, 2, 10.2), n, replace=TRUE,
prob=c(0.8, 0.18, 0.02))
set.seed(26 + .x -1)
lon <- (lon + -5 * .x) + 20 * sin(2 * pi * x) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
lat <- (lat + -3 * .x) + 10 *(sin(3 * 2 * pi * x) + cos(2 * pi * x) - 1) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
tms <- ISOdate(2001, 1, 1) + trunc(days * 24 * 60 * 60 *x) + time * 3600 * 24 * 7 *  sign(rnorm(1)) * .x
tibble::tibble(
x =  lon,
y =  lat,
date = tms)
}, .id = "id")
if (plot) {
plot(d$x, d$y, asp = 1/cos(mean(d$y) * pi/180))
lines(d$x, d$y)
maps::map(add = TRUE)
}
d
}
library(magrittr)
trips0 <- make_fake(3) %>% dplyr::select(x, y, date, id)
usethis::use_data(trips0, overwrite = TRUE)
library(triplib)
library(triplib)
library(tidyverse)
## there's no grouping here - we haven't gotten our data organized yet
trips0 %>% mutate(distance = track_distance(x, y), angle = track_angle(x, y))
## now we group by id (also need arrange by date to be sure ...)
metric <- trips0 %>% group_by(id) %>% mutate(distance = track_distance(x, y), angle = track_angle(x, y))
metric
metric %>%
ggplot(aes(x, y, cex= 1/angle)) +
geom_point() +
geom_path(col = rgb(0.2, 0.2, 0.2, 0.2))
usethis::use_github_links()
usethis::use_travis()
usethis::use_appveyor()
usethis::use_coverage()
maptools:::gzAzimuth
?maptools:::gzAzimuth
library(triplib)
track_angle(trips0$x, trips0$y)[1:10]
xy <- cbind(trips0$x, trips0$y)[1:10, ]
n <- nrow(xy)
angle <- .abdali(x[2:(n-1),],x[3:n,]) - .abdali(x[2:(n-1),],x[1:(n-2),])
devtools::load_all(".")
devtools::load_all(".")
angle <- .abdali(x[2:(n-1),],x[3:n,]) - .abdali(x[2:(n-1),],x[1:(n-2),])
devtools::load_all(".")
track_angle(trips0$x, trips0$y)[1:10]
trip::trackAngle(trips0[c("x", "y")])
trip::trackAngle(trips0[c("x", "y")])[1:10]
track_angle(trips0$x, trips0$y)[1:10]
devtools::load_all(".")
track_angle(trips0$x, trips0$y)[1:10]
trip::trackAngle(trips0[c("x", "y")])[1:10]
devtools::load_all(".")
trip::trackAngle(trips0[c("x", "y")])[1:10]
trip::trackAngle(trips0[c("x", "y")])[1:10]
track_angle(trips0$x, trips0$y)[1:10]
devtools::load_all(".")
track_angle(trips0$x, trips0$y)[1:10]
trip::trackAngle(as.matrix(trips0[c("x", "y")]))[1:10]
plot(trips0[1:10, 1:2])
plot(trips0[1:10, 1:2], type = "b")
plot(trips0[1:10, 1:2], type = "b"); points(trips0[c(1, 10), 1:2], col = c("red", "blue"))
devtools::load_all(".")
trip::trackAngle(as.matrix(trips0[c("x", "y")]))[1:10]
track_angle(trips0$x, trips0$y)[1:10]
devtools::load_all(".")
track_angle(trips0$x, trips0$y)[1:10]
plot(trips0[1:10, 1:2], type = "b"); points(trips0[c(1, 10), 1:2], col = c("red", "blue"))
plot(reproj::reproj(trips0[1:10, 1:2], "+proj=laea +lon_0=117 +lat_0=-40"), type = "b"); points(trips0[c(1, 10), 1:2], col = c("red", "blue"))
plot(reproj::reproj(trips0[1:10, 1:2], "+proj=laea +lon_0=117 +lat_0=-40", source = 4326), type = "b"); points(trips0[c(1, 10), 1:2], col = c("red", "blue"))
plot(reproj::reproj(trips0[1:10, 1:2], "+proj=laea +lon_0=117 +lat_0=-40", source = "+proj=longlat"), type = "b"); points(trips0[c(1, 10), 1:2], col = c("red", "blue"))
plot(reproj::reproj(trips0[1:10, 1:2], "+proj=laea +lon_0=117 +lat_0=-40", source = "+proj=longlat +datum=WGS84"), type = "b"); points(trips0[c(1, 10), 1:2], col = c("red", "blue"))
plot(reproj::reproj(trips0[1:10, 1:2], "+proj=laea +lon_0=117 +lat_0=-40 +datum=WGS84", source = "+proj=longlat +datum=WGS84"), type = "b"); points(trips0[c(1, 10), 1:2], col = c("red", "blue"))
track_angle(trips0$x, trips0$y)[1:10]
library(moveHMM)
x <- trips0$x[6:8]
x <- c(trips0$x[6], trips0$y[6])
y <- c(trips0$x[7], trips0$y[7])
z <- c(trips0$x[8], trips0$y[8])
turnAngle(x, y, z)
moveHMM:::turnAngle(x, y, z)
moveHMM:::turnAngle(x, y, z, LLangle = FALSE)
moveHMM:::turnAngle(x, y, z, LLangle = TRUE)
moveHMM:::turnAngle(x, y, z, LLangle = TRUE) * 180/pi
plot(trips0[1:10, 1:2], type = "b"); points(trips0[c(1, 10), 1:2], col = c("red", "blue"))
points(rbind(x, y, z), pch = 2:4)
moveHMM:::turnAngle(x, y, z, LLangle = FALSE) * 180/pi
moveHMM:::turnAngle
library(adehabitat)
install.packages("adehabitat")
library(adehabitatLT)
angles
install.packages("trajr")
library(trajr)
?trajr::TrajAngles
set.seed(42)
trj <- TrajGenerate(angularErrorSd = 1.3)
plot(trj)
TrajAngles(trj)
TrajAngles(trj)[1:10]
str(try)
str(trj)
track_angle(trj$x, trj$y)[1:10]
track_angle(trj$x, trj$y)[1:10] * 180/pi
track_angle(trj$x, trj$y)[1:10] * pi/180
length(TrajAngles(trj))
.abdali(trj$x, trj$y)[1:10]
xy <- cbind(trj$x, trj$y)
n <- nrow(xy)
.abdali(xy[2:(n - 1), , drop = FALSE], xy[3:n, , drop = FALSE])[1:10]
.abdali(xy[2:(n - 1), , drop = FALSE], xy[3:n, , drop = FALSE])[1:10] * pi/180
d <- tibble(x = trj$x, y = trj$y, a = c(NA, TrajAngles(trj), NA))
library(tidyverse)
d <- tibble(x = trj$x, y = trj$y, a = c(NA, TrajAngles(trj), NA))
ggplot(d) + geom_point(aes(x, y, colour = a))
ggplot(d) + geom_point(aes(x, y, colour = 1/a))
ggplot(d) + geom_point(aes(x, y, colour = 1/a)) + geom_line(lwd = 1)
ggplot(d, aes(x, y, colour = 1/a)) + geom_point() + geom_path(lwd = 1)
ggplot(d[1:10, ], aes(x, y, colour = 1/a)) + geom_point() + geom_path(lwd = 1)
ggplot(d[1:20, ], aes(x, y, colour = 1/a)) + geom_point() + geom_path(lwd = 1)
ggplot(d[1:20, ], aes(x, y, colour = 1/a)) + geom_point() + geom_path(lwd = 1, col = "black")
ggplot(d[1:20, ], aes(x, y, colour = 1/a)) + geom_point() + geom_path(lwd = .1, col = "black")
ggplot(d[1:20, ], aes(x, y, colour = 1/abs(a))) + geom_point() + geom_path(lwd = .1, col = "black")
ggplot(d[1:20, ], aes(x, y, colour = abs(a))) + geom_point() + geom_path(lwd = .1, col = "black")
usethis::use_package('geodist')
devtools::load_all(".")
TrajAngles(trj)[1:10]
xy <- cbind(trj$x, trj$y)
track_turn(xy)[1:10]
track_turn(trj$x, trj$y)[1:10]
track_turn(trj$x, trj$y)[1:10] * 180/pi
track_turn(trj$x, trj$y)[1:10] * pi/180
devtools::load_all(".")
track_turn(trj$x, trj$y)[1:10] * pi/180
plot(xy[1:10, ])
plot(xy[1:10, ], type = "b")
points(xy[1, , drop = FALSE], col = "red")
devtools::load_all(".")
track_turn(trj$x, trj$y)[1:10] * pi/180
TrajAngles
Arg
?Arg
trj$displacement
str(trj)
dim(xy)
xy <- xy[1:10, ]
xy[1:(n - 1)
]
xy[1:(n - 1), ]
n <- 10
xy[1:(n - 1), ]
xy[2:n, , drop = FALSE]
.abdali(xy[1:(n-1), ], xy[2:n, , drop = FALSE])
347 - 29
29 - 347
29 - 347 + 360
?amt
xy <- sp::SpatialPoints(cbind(c(1, 3, 2, 1), c(3, 2, 2, 1)))
as_track(xy)
library(amt)
xy <- sp::SpatialPoints(cbind(c(1, 3, 2, 1), c(3, 2, 2, 1)))
as_track(xy)
str(as_track(xy))
deer
make_track
tac(deer)
tac
amt:::tac.track_xy
steps
amt:::steps.track_xy
amt:::steps_base
direction_rel
amt:::direction_rel.track_xy
amt:::direction_abs.track_xy
make_track(xy)
make_track(as.data.frame(xy))
make_track(data.frame(x = xy[,1], y = xy[,2]))
make_track(data.frame(x = xy[,1], y = xy[,2]), x, y)
?make_track
make_track(data.frame(x = xy[,1], y = xy[,2], t = 1:10), x, y, t)
xy
xy <- cbind(trj$x, trj$y)[1:10, ]
make_track(data.frame(x = xy[,1], y = xy[,2], t = 1:10), x, y, t)
direction_abs(make_track(data.frame(x = xy[,1], y = xy[,2], t = 1:10), x, y, t))
direction_rel(make_track(data.frame(x = xy[,1], y = xy[,2], t = 1:10), x, y, t))
?geosphere::bearing
devtools::load_all(".")
track_turn(trj$x, trj$y)[1:10]
track_turn(trj$x, trj$y)
plot(trj$x)
plot(trj$y)
track_turn(trips0$x, trips0$y)[1:10]
plot(trips0[1:10, 1:2])
points(trips0[1:10, 1:2], pch = 1:10)
plot(trips0[1:10, 1:2], type = "b", pch = 1:10)
diff_rcpp
amt:::diff_rcpp
?diff
devtools::load_all(".")
track_turn(trips0$x, trips0$y)[1:10]
amt <- make_track(trips0, x, y, date)
amt <- make_track(trips0, x, y, date, crs = "+proj=longlat +datum=WGS84")
amt <- make_track(trips0, x, y, date, crs = sp::CRS("+proj=longlat +datum=WGS84"))
amt
plot(amt)
amt::direction_rel(amt[1:10, ])
devtools::load_all(".")
track_turn(trips0$x, trips0$y)[1:10]
track_turn
amt
trips0
arrange(trips0, date)
make_fake <- function(ngroup = 1, lon = 120, lat = -40, time = 0, plot = TRUE) {
## Brownian motion tethered at each end
brownian.bridge <- function(n, r) {
x <- cumsum(rnorm(n, 0, 1))
x <- x - (x[1] + seq(0, 1, length=n) * (x[n] - x[1]))
r * x
}
d <- purrr::map_dfr(seq_len(ngroup), ~{
## Number of days and number of obs
days <- 80
n <- 500
## Make separation between obs gamma distributed
x <- rgamma(n, 3)
x <- cumsum(x)
x <- x/x[n]
## Track is lissajous + brownian bridge
b.scale <- 0.6
r.scale <- sample(c(0.1, 2, 10.2), n, replace=TRUE,
prob=c(0.8, 0.18, 0.02))
set.seed(26 + .x -1)
lon <- (lon + -5 * .x) + 20 * sin(2 * pi * x) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
lat <- (lat + -3 * .x) + 10 *(sin(3 * 2 * pi * x) + cos(2 * pi * x) - 1) +
brownian.bridge(n, b.scale) + rnorm(n, 0, r.scale)
tms <- ISOdate(2001, 1, 1) + trunc(days * 24 * 60 * 60 *x) + time * 3600 * 24 * 7 *  sign(rnorm(1)) * .x
tibble::tibble(
x =  lon,
y =  lat,
date = tms)
}, .id = "id")
if (plot) {
plot(d$x, d$y, asp = 1/cos(mean(d$y) * pi/180))
lines(d$x, d$y)
maps::map(add = TRUE)
}
d %>% arrange(id, date)
}
library(magrittr)
trips0 <- make_fake(3) %>% dplyr::select(x, y, date, id)
usethis::use_data(trips0)
usethis::use_data(trips0, overwrite = TRUE)
devtools::load_all(".")
track_turn(trips0$x, trips0$y)[1:10]
amt::direction_rel(amt[1:10, ])
amt::direction_abs(amt[1:10, ])
amt <- make_track(trips0, x, y, date, crs = sp::CRS("+proj=longlat +datum=WGS84"))
amt::direction_abs(amt[1:10, ])
amt::direction_rel(amt[1:10, ])
track_turn(trips0$x, trips0$y)[1:10]
amt::direction_abs
amt:::direction_abs.track_xy
devtools::load_all(".")
track_turn(trips0$x, trips0$y)[1:10]
amt::direction_rel(amt[1:10, ])
amt::direction_rel(amt[1:10, ], zero_dir = "N")
amt::direction_rel(amt[1:10, ], clockwise  = TRUE)
?direction_rel
amt:::direction_rel.track_xy
devtools::load_all(".")
amt::direction_rel(amt[1:10, ], longlat = TRUE)
amt::direction_rel(amt[1:10, ], lonlat = TRUE)
track_turn(trips0$x, trips0$y)[1:10]
amt[1:10, ]
amt::direction_rel(amt[1:10, ], lonlat = TRUE)
trips[1:10, ]
trips0[1:10, ]
amt <- make_track(trips0[1:10, ], x, y, date)
amt::direction_rel(amt[1:10, ], lonlat = TRUE)
devtools::load_all(".")
plot(trips0[1:10, ])
plot(trips0[1:10, 1:2], type = "b", pch = 1:10)
track_turn(trips0$x, trips0$y)[1:10]
devtools::load_all(".")
track_turn(trips0$x, trips0$y)[1:10]
track_angle(trips0$x, trips0$y)[1:10]
?geosphere::bearing
geosphere::bearing
devtools::load_all(".")
track_angle(trips0$x, trips0$y)[1:10]
devtools::load_all(".")
track_angle(trips0$x, trips0$y)[1:10]
usethis::use_package("geosphere")
library(help = sp)
devtools::load_all(".")
library(lattice)
